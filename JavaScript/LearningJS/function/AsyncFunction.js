
// 5, 4, 3, 2, 1, go! 를 예상했지만
// 결과는 -1 6번
// 루프가 끝나고 setTimeout 안에 있는 코드가 실행됐기 때문이다.

for (var i = 5; i >= 0 ; i--) {
    setTimeout(
        function () {
            console.log(i === 0 ? "go!" : i);
        }, (5 - i) * 1000
    );
}

////////////////////////////////////////////////////////////

// let 키워드를 쓰지 않고 해결하는 방법은 스코프를 하나 더 많드는 것이다.
// 함수를 써서 새로운 스코프를 만들어, 각 단계의 i 의 값이 클로저에 캡처되게 한다.

function loopBody(i) {
    setTimeout(
        function () {
            console.log(i === 0 ? "go!" : i);
        }, (5 - i) * 1000
    );
}

for (var i = 5 ; i >= 0 ; i--) {
    loopBody(i);
}

////////////////////////////////////////////////////////////

// 익명 함수를 사용해 코드를 단순화 시킬수 있다.
for (var i = 5 ; i >= 0 ; i--) {
    (function f(i) {
        setTimeout(
            function () {
                console.log(i === 0 ? "go!" : i);
            }, (5 - i) * 1000
        );
    })(i);
}

////////////////////////////////////A////////////////////////

// let 키워드를 쓰면 루프 단계 마다 변수 i 의 복사본을 만들어
// setTimeout 에 전달한 함수가 실행될 때는 독립 스코프에서 변수를 받는다.
for (let i = 5 ; i >= 0 ; i--) {
    setTimeout(
        function () {
            console.log(i === 0 ? "go!" : i);
        }, (5 - i) * 1000
    );
}